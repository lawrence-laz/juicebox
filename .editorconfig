[*.{cs,vb}]
dotnet_diagnostic.IDE0008.severity = none
dotnet_diagnostic.IDE0022.severity = none
dotnet_diagnostic.IDE0058.severity = none
dotnet_diagnostic.CA1051.severity = none

csharp_style_expression_bodied_operators = when_on_single_line
csharp_style_namespace_declarations = file_scoped:warning

# Style Definitions
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.capitalization = pascal_case
dotnet_naming_style.prefix_underscore.required_prefix = _
dotnet_naming_style.prefix_underscore.capitalization = camel_case

# Use PascalCase for constants and readonly static fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols  = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style    = pascal_case
dotnet_naming_symbols.constant_fields.applicable_kinds            = field
dotnet_naming_symbols.constant_fields.applicable_accessibilities  = *
dotnet_naming_symbols.constant_fields.required_modifiers          = const

dotnet_naming_rule.static_readonly_fields.severity = warning
dotnet_naming_rule.static_readonly_fields.symbols  = static_readonly_fields
dotnet_naming_rule.static_readonly_fields.style    = pascal_case
dotnet_naming_symbols.static_readonly_fields.applicable_kinds            = field
dotnet_naming_symbols.static_readonly_fields.applicable_accessibilities  = *
dotnet_naming_symbols.static_readonly_fields.required_modifiers          = static, readonly

# Use I prefix for interfaces
dotnet_naming_rule.interface_should_be_begins_with_i.severity = warning
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

# Use _ prefix for non-public fields
dotnet_naming_rule.private_or_internal_field_should_be_prefix_underscore.severity = warning
dotnet_naming_rule.private_or_internal_field_should_be_prefix_underscore.symbols = private_or_internal_field
dotnet_naming_rule.private_or_internal_field_should_be_prefix_underscore.style = prefix_underscore

# Use PascalCase for types
dotnet_naming_rule.types_should_be_pascal_case.severity = warning
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

# Use PascalCase for non-field members
dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# Symbol specifications
dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected

dotnet_naming_symbols.private_or_internal_field.applicable_kinds = field
dotnet_naming_symbols.private_or_internal_field.applicable_accessibilities = internal, private, private_protected

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
